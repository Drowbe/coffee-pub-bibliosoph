=============== DEBUG CODE ====================



// FORMAT
postDebug("CONSOLE/NOTIFICATION/BOTH", "INFO/WARN/ERROR", "Title", "Message"", true/false);

// ERROR HANDLING
postDebug("CONSOLE", "INFO", title, message, override);


===============================================



can do replies by adding the whisper macro tag...

@UUID[Macro.PxKGuBNbUctE9INd]{Private Message}

BUT... need to find the ID for the macro for the player.


=============== MARKDOWN TESTING ====================



# This is a HEADING 1
---
This is an awesome paragraph with **bold** and *italics* text in it. There is no line between the this paragraph and the heading.
This is a scond paragraph. I did not put a space between it and the paragraph before it.

This is a third paragraph. I did put a space between it and the last one.
Let's get crazy and do some **blockquote** text here:
> This is the first line.
> This is the second line with **bold** text
>
> Above this line was an empty line with the blockquote symbol.
## This is a HEADING 2
This is a paragraph with no break after the H2 above it.
### This is a list with a HEADING 3
- This is item 1.
- This is item 2 and **bold** text.
- This is item three. FUN!
---
1. This is a numbered list and it should increment.
1. even though I led with a 1, it should still  be a 2.
8. I put an 8 here just to be a jerk and make it work hard.



========================== BEGIN WHISPER MACRO ==========================



// Whisper Macro


let strUser = game.user.name;
let strPortrait = game.user.avatar;

var defaultToCharacter = false; //"true" means the dialog will select a character to speak as by default; "false" means the dialog will select to speak as you, the player, by default.
var activePlayersOnly = false; //"true" means the dialog is only populated with active players currently in the session; "false" means the dialog is populated with all players in the world.
var warnIfNoTargets = true; //"true" means your whisper will not be posted if you did not select a player; "false" means your whisper will be posted for all players to see if you do not select a player.
var userConfigCharacterOnly = true; //Changes what appears when you hover on a player's name. "true" shows only the name of the character bound to them in their User Configuration; "false" shows a list of names for all characters they own. GMs and Assistant GMs do not get character lists regardless; they're labeled with their position.
var strSound = "/assets/sounds/one-shots/fire-candle-blow.mp3";

var check1 = "checked";
var check2 = "";
if (defaultToCharacter === true) {
    check1 = "";
    check2 = "checked";
}

var whisperSpeakerID = "";
if (game.user.character !== null && game.user.character !== undefined) {
    whisperSpeakerID = game.user.character.id
}
if (canvas.tokens.controlled[0] !== undefined && canvas.tokens.controlled[0].actor !== null) {
    whisperSpeakerID = canvas.tokens.controlled[0].actor.id;
}
if (activePlayersOnly === true) {
    var players = game.users.filter(player => player.active);
} else {
    var players = game.users;
}

// Build the "whisoer to" checkboxes
var characters = game.actors;
var checkOptions = "";
var strToActors = "";
var targets = Array.from(game.user.targets);
players.forEach(player => {
    if (player.id !== game.user.id) {
        if (player.name !== "Cameraman") {
            if (player.name !== "Author") {
                if (player.name !== "AudienceUNBLOCKFORTESTING") {
                    var checked = "";
                    if (targets.length > 0) {
                        for (let i = 0; i < targets.length; i++) {
                            if (game.actors.get(targets[i].data.actorId).data.permission[player.id] !== undefined && game.actors.get(targets[i].data.actorId).data.permission[player.id] > 2) {
                                checked = "checked";
                            }
                        }
                    }
                    var ownedCharacters = "";
                    if (player.role == 4) {
                        ownedCharacters = "Gamemaster";
                    } else if (player.role == 3) {
                        ownedCharacters = "Assistant Gamemaster";
                    } else if (userConfigCharacterOnly == true && player.character !== null && player.character !== undefined) {
                        ownedCharacters = player.character.name;
                    } else {
                        characters.forEach(character => {
                            if (character.data.permission[`${player.id}`] > 2) {
                                var charName = character.name.replace(/'/g, '`');
                                var startSymbol = "; ";
                                if (ownedCharacters == "") {
                                    startSymbol = "";
                                }
                                ownedCharacters += startSymbol + charName;
                            }
                        });
                    }
                    checkOptions += `<input type='checkbox' id='${player.id}' name='${player.id}' value='${player.name}' ${checked} style='display:inline-block; vertical-align:top; width:5%; margin:0px;'><label for='${player.id}' style='display:inline-block; vertical-align:middle; width:26%; margin:0px 1%; text-align:left;' title='${ownedCharacters}'>${player.name}</label>`;
                }
            }
        }
    }
});


// Build the list of possible speakers
var listOptions = "";
var strCharacterWasSelected = "false";
var strIsPlayer = "false";
characters.forEach(character => {
    var selected = "";
    // See if a token is selected on the map
    if (character.id == whisperSpeakerID) {
        selected = "selected";
        strCharacterWasSelected = "true";
        // need to see if this is a player so we don't add the gamemaster option
        strIsPlayer = "true";
    }
    // build the option html
    if (character.permission > 2) {
        listOptions += `<option value='${character.id}' ${selected}>${character.name}</option>`;
        strCharacterWasSelected = "true";
    }
});

// if they didn't select a token and didn't select from dropdown, default to self
// only add if not a player
var strAddGMOption = "<option value='" + whisperSpeakerID + "'>-- Gamemaster --</option>";
if (strIsPlayer == "false") {
    if (strCharacterWasSelected == "false") {
        strAddGMOption = "<option value='" + whisperSpeakerID + "' selected>-- Gamemaster --</option>";
    }else{
        strAddGMOption = "<option value='" + whisperSpeakerID + "'>-- Gamemaster --</option>";
    }
}
// Build the whisper form
var currentMessage = $("#chat-message").val();

new Dialog({
    title: "Whisper",
    content: `
        <div style='width: 100%; margin-bottom: 5px;'>
            <strong>Whisper to...</strong>
        </div>
        <div style='width: 100%; margin-bottom: 10px;'>
            ${checkOptions}
        </div>
        <div style='width: 100%; margin-bottom: 5px;'>
            <strong>Whisper as...</strong>
        </div>
        <div style='width: 100%; margin-bottom: 10px;'>
            <select name='characters' id='characters' style='width:100%;'>
                ${strAddGMOption}
                ${listOptions}
            </select>
        </div>
        <div style='width: 100%; margin-bottom: 5px;'>
            <strong>Message:</strong>
        </div>
        <div style='width: 100%; margin-bottom: 10px;'>
            <textarea id='message' name='whisperText' rows='6' style='margin:5px 0px;'>${currentMessage}</textarea>
        </div>`,
    buttons: {
        whisper: {
            icon: "<i class='fas fa-feather'></i>",
            label: "Send Whisper",
            callback: (html) => createWhisper(html)
        }
    }
}).render(true);

// Create the whisper and send to the chat
function createWhisper(html) {
    const whisperID = new Array();
    var integer = 0;

    var strCharacterName = "";

    players.forEach(player => {
        if (html.find('[name="' + player.id + '"]:checked').length > 0) {
            whisperID[integer] = player.id;
            integer = integer + 1;

            // Build the "to" list
            if (strToActors.length > 0) {
            	strToActors = strToActors + '</b>, <b>' + player.name;
            } else {
            	strToActors = '<b>' + player.name;
            }
            strToActors = strToActors + '</b>';

        }
    });
    var finalWhisperSpeaker = $("#characters").val();
    var whisperMessage = html.find('[name="whisperText"]')[0].value;
    var strCharacterName = "";

    // ***************** SEND THE WHISPER **************
    if (whisperID.length < 1 && warnIfNoTargets === true) {
        ui.notifications.warn("You did not select a target for the whisper, so your whisper did not send.");
    } else {        
        // Figure out the speaker
        characters.forEach(character => {

            if (character.id == finalWhisperSpeaker) {
                if (character.permission > 2) {
                    strCharacterName = `${character.name}`;
                }
            }
        });
        // if they didn't select a character, it must be the gamemaster
        if (strCharacterName.length < 1) {
            // ui.notifications.warn("YstrCharacterName.length = " + strCharacterName.length);
            strCharacterName = "Gamemaster";
        }
        ChatMessage.create({
            user: game.user.id,
            speaker: ChatMessage.getSpeaker({
            actor: game.actors.get(finalWhisperSpeaker)
            }),

            content: '<blockquote class="chatboxWhisper"><h5>Whisper Received</h5><h6>From <b>' + strCharacterName + '</b> to ' + strToActors + '</h6><div><image src="' + strPortrait + '"></img></div><p>' + whisperMessage + '</p></blockquote>',
            whisper: whisperID
        });
        // Play the sound
        AudioHelper.play({src: strSound, volume: 1, autoplay: true, loop: false}, true);
    }
}





========================== END WHISPER MACRO ==========================


<section id="bibliosoph-messages-section">

<form>
  <section id="bubo-messages-section">
      <select id="optionChatType" name="optionChatType">
        <option value="chatboxGeneral">General Message</option>
        <option value="chatboxVote">Time to Vote</option>
        <option value="chatboxThumbsup">Thumbs-up</option>
        <option value="chatboxThumbsdown">Thumbs-Down</option>
        <option value="chatboxSassy">Smack Talk</option>
        <option value="chatboxBio">Custom Bio Break</option>
        <option value="chatboxBeverage">Custom Beverage Break</option>
      </select>
      <div id="bubo-input-bar">
          <textarea rows="5" name='inputMessage' value="{{msg}}"></textarea>
          <button type="submit" value="Submit" class="bubo-send-button"><i class="fas fa-circle-up"></i></button>
      </div>
  </section>
</form>



{{!-- {{log 'bubo window template' this}} --}}
<form>
    <section id="bubo-messages-section">
        {{#each messages}}
        {{>message}}
        {{/each}}
        <div id="bubo-input-bar">
            <input type="text" id="query" name="query" placeholder="You ask Bubo">
            <button type="submit" value="Submit" class="bubo-send-button"><i class="fas fa-circle-up"></i></button>
        </div>
    </section>
</form>




<form class="flexcol">
  <div class="form-group">
    <select id="optionChatType" name="optionChatType">
      <option value="chatboxGeneral">General Message</option>
      <option value="chatboxVote">Time to Vote</option>
      <option value="chatboxThumbsup">Thumbs-up</option>
      <option value="chatboxThumbsdown">Thumbs-Down</option>
      <option value="chatboxSassy">Smack Talk</option>
      <option value="chatboxBio">Custom Bio Break</option>
      <option value="chatboxBeverage">Custom Beverage Break</option>
    </select>
    <br><br>
    <textarea rows="5" name='inputMessage' value="{{msg}}"></textarea>
  </div>
  <footer class="sheet-footer flexrow">
    <button type="submit" name="submit">
        <i class="fa fa-check"></i> OK
    </button>
  </footer>
</form>


















:root {
    --container-padding: 12px;
    --input-bar-height: 148px;
}


div#coffee-pub-bibliosoph {
    overflow: hidden;
}

div#coffee-pub-bibliosoph .window-content {
    padding: 0;
    overflow: hidden;
    background: #000000;

}

li:has(.bibliosoph-icon) {
    display: flex !important;
}

/* .bibliosoph-icon {
    flex: 1;
    background-image: url("../assets/bibliosoph-icon-menu.svg");
    background-repeat: no-repeat;
    background-position: center;
    background-size: 80%;
} */

#bibliosoph-messages-section {
    height: 300px;
	
    max-height: 300px;
    overflow-y: scroll;
    padding: 
        var(--container-padding)
        var(--container-padding)
        calc(var(--input-bar-height) + 2 * var(--container-padding))
        var(--container-padding);
    scroll-behavior: auto;
    scroll-snap-align: end;
    scroll-padding-bottom: 50px;
}

.bibliosoph-title-bar {
    display: flex;
    flex-direction: row;
    gap: 5px;
    margin: -8px -8px 0px -8px;
    align-items: center;
    line-height: 1em;
    background: #000000;
    padding: 8px;
}

#bibliosoph-messages-section .cp-chat-card {
    opacity: 1;
    transform: translateY(0);
    transition: opacity 0.25s ease-out, transform 0.25s ease-out;
}

#bibliosoph-messages-section .bibliosoph-message-new {
    opacity: 0 !important;
    transform: translateY(10px) !important;

}

.bibliosoph-message-content {
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 5px;
	
}

.bibliosoph-message-sender {
    flex: 1 0 0;
}

.bibliosoph-send-button {
    flex: 0 1 0;
    background-color: var(--color-text-light-0);
    color: rgba(0, 170, 0, 0.8);
    border: none;
    padding: 2px;
    font-size: 28px;
    position: absolute;
    right: 8px;
    width: 32px;
    height: 32px;
    border-radius: 16px;
    top: 8px;
}

/* .bibliosoph-message .bibliosoph-send-button {
    margin-top: -5px;
    margin-bottom: -3px;
} */

.bibliosoph-status-icon {
    color: white;
}

#bibliosoph-input-bar {
    display: flex;
    flex-direction: row;
    gap: 10px;
    background: #000000;
    padding: 0;
    margin: 0 var(--container-padding);
    position: absolute;
    bottom: var(--container-padding);
    width: calc(100% - 4 * var(--container-padding));
    border: 1px solid var(--color-border-light-tertiary);
    border-radius: 24px;
}

#bibliosoph-input-bar input[type="text"] {
    flex: 1 0 0;
    color: white;
    height: var(--input-bar-height);
    padding: var(--container-padding);
    background: none;
    border: none;
    border-radius: calc(var(--input-bar-height) / 1.0);
    font-size: 1em;
}

.bibliosoph-user-theme {
    background: #000000;
    color: white;;
    border: none !important;
    padding: 8px !important;
}

.bibliosoph-fine-print {
    margin-top: 8px;
}

.bibliosoph-question {
    gap: 0;
}

.bibliosoph-question small {
    font-size: 1.0em;
}


/* THEMES */

.cp-chat-card.bibliosoph-red-theme {
    background: var(--cp-red);
    color: white;
    border-color: var(--cp-red-light);
}
.bibliosoph-red-theme .cp-chat-card-section, .bibliosoph-red-theme .cp-chat-card-bar {
    background: var(--cp-red-dark);
}
.bibliosoph-red-theme button {
    background: var(--cp-red-light);
    color: white;
}
.bibliosoph-red-theme .bibliosoph-title-bar {
    background: var(--cp-red-light);
}

.cp-chat-card.bibliosoph-blue-theme {
    background: var(--cp-blue);
    color: white;
    border-color: var(--cp-blue-light);
}
.bibliosoph-blue-theme .cp-chat-card-section, .bibliosoph-blue-theme .cp-chat-card-bar {
    background: var(--cp-blue-dark);
}
.bibliosoph-blue-theme button {
    background: var(--cp-blue-light);
    color: white;
}
.bibliosoph-blue-theme .bibliosoph-title-bar {
    background: var(--cp-blue-light);
}


